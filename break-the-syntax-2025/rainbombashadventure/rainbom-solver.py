import hashlib

distances = {
    0: {6: 18267351, 1: 27207933, 2: 29257191, 3: 30767375, 4: 33358061, 5: 31710853, 7: 28646422, 8: 25181575, 9: 32668955, 10: 31721351, 11: 31311914, 12: 17436287, 13: 31231519, 14: 27398390, 15: 26665226, 16: 33405147, 17: 29479064, 18: 28859609, 19: 32875400},
    6: {0: 18267351, 4: 16937956, 1: 26073565, 2: 25822626, 3: 28073673, 5: 27018180, 7: 25268124, 8: 32590760, 9: 27138017, 10: 32999152, 11: 26220279, 12: 26204222, 13: 27031462, 14: 25273715, 15: 25443122, 16: 28617815, 17: 27829458, 18: 29730434, 19: 29457736},
    1: {0: 27207933, 6: 26073565, 4: 27706598, 18: 26989354, 16: 33402104, 8: 30552119, 3: 27461140, 10: 32910477, 9: 31028215, 13: 32961668, 19: 28354374, 7: 31907885, 17: 29926349, 14: 32744601, 11: 33323884, 5: 17153389, 2: 18723267, 12: 31917434, 15: 32930203},
    2: {0: 29257191, 6: 25822626, 4: 30094007, 18: 27936885, 16: 28667078, 8: 30354002, 3: 26971581, 10: 26252638, 9: 29221683, 13: 26305193, 19: 25722954, 7: 31797481, 17: 30263697, 14: 32130369, 11: 25958512, 5: 26800381, 1: 18723267, 15: 17552296, 12: 30021148},
    3: {0: 30767375, 6: 28073673, 4: 31156816, 18: 27739929, 16: 29721951, 8: 18396217, 10: 16791286, 1: 27461140, 2: 26971581, 5: 30331322, 7: 26204203, 9: 25838588, 11: 26131377, 12: 29700497, 13: 27798881, 14: 33059254, 15: 29477864, 17: 29439773, 19: 30777073},
    4: {0: 33358061, 6: 16937956, 18: 17392801, 1: 27706598, 2: 30094007, 3: 31156816, 5: 27346875, 7: 32281098, 8: 30112898, 9: 27364910, 10: 30685671, 11: 33231675, 12: 28723588, 13: 31226010, 14: 30541690, 15: 25856444, 16: 31229621, 17: 31201226, 19: 27161053},
    5: {0: 31710853, 6: 27018180, 4: 27346875, 18: 25178897, 16: 27754527, 8: 28340609, 3: 30331322, 10: 31493000, 9: 26024216, 13: 26366524, 19: 25771567, 7: 26738900, 17: 30294100, 14: 28566084, 11: 17879357, 1: 17153389, 2: 26800381, 12: 33432247, 15: 30498671},
    7: {0: 28646422, 6: 25268124, 4: 32281098, 18: 31905380, 16: 28136501, 8: 25545320, 3: 26204203, 10: 31145177, 9: 33382954, 13: 27768727, 19: 18428695, 17: 18433903, 1: 31907885, 2: 31797481, 5: 26738900, 11: 27664100, 12: 32470009, 14: 27949390, 15: 27242094},
    8: {0: 25181575, 6: 32590760, 4: 30112898, 18: 29889268, 16: 17863705, 3: 18396217, 1: 30552119, 2: 30354002, 5: 28340609, 7: 25545320, 9: 27003713, 10: 25437214, 11: 31796476, 12: 32892705, 13: 25571056, 14: 29517404, 15: 29493907, 17: 30959457, 19: 30146332},
    9: {0: 32668955, 6: 27138017, 4: 27364910, 18: 25934690, 16: 27950322, 8: 27003713, 3: 25838588, 10: 18199400, 13: 17432494, 1: 31028215, 2: 29221683, 5: 26024216, 7: 33382954, 11: 27564338, 12: 29696304, 14: 29903977, 15: 25517772, 17: 31033257, 19: 27689266},
    10: {0: 31721351, 6: 32999152, 4: 30685671, 18: 30621460, 16: 30132076, 8: 25437214, 3: 16791286, 9: 18199400, 1: 32910477, 2: 26252638, 5: 31493000, 7: 31145177, 11: 25876546, 12: 31958139, 13: 27864810, 14: 28321738, 15: 32744171, 17: 26162759, 19: 26660593},
    11: {0: 31311914, 6: 26220279, 4: 33231675, 18: 31975694, 16: 28330910, 8: 31796476, 3: 26131377, 10: 25876546, 9: 27564338, 13: 26446653, 19: 29184736, 7: 27664100, 17: 27423379, 14: 18665171, 5: 17879357, 1: 33323884, 2: 25958512, 12: 28787506, 15: 26795144},
    12: {0: 17436287, 6: 26204222, 4: 28723588, 18: 25437981, 16: 26932680, 8: 32892705, 3: 29700497, 10: 31958139, 9: 29696304, 13: 30143172, 19: 31899333, 7: 32470009, 17: 31591461, 14: 25912069, 11: 28787506, 5: 33432247, 1: 31917434, 2: 30021148, 15: 18840703, 12: 0},
    13: {0: 31231519, 6: 27031462, 4: 31226010, 18: 33245767, 16: 33332666, 8: 25571056, 3: 27798881, 10: 27864810, 9: 17432494, 19: 18585598, 1: 32961668, 2: 26305193, 5: 26366524, 7: 27768727, 11: 26446653, 12: 30143172, 14: 31608667, 15: 32254626, 17: 28876524},
    14: {0: 27398390, 6: 25273715, 4: 30541690, 18: 28664099, 16: 31369881, 8: 29517404, 3: 33059254, 10: 28321738, 9: 29903977, 13: 31608667, 19: 32553702, 7: 27949390, 17: 17023154, 11: 18665171, 1: 32744601, 2: 32130369, 5: 28566084, 12: 25912069, 15: 32919698},
    15: {0: 26665226, 6: 25443122, 4: 25856444, 18: 27812923, 16: 32324337, 8: 29493907, 3: 29477864, 10: 32744171, 9: 25517772, 13: 32254626, 19: 28001748, 7: 27242094, 17: 31222350, 14: 32919698, 11: 26795144, 5: 30498671, 1: 32930203, 2: 17552296, 12: 18840703, 15: 0},
    16: {0: 33405147, 6: 28617815, 4: 31229621, 18: 18709664, 8: 17863705, 1: 33402104, 2: 28667078, 3: 29721951, 5: 27754527, 7: 28136501, 9: 27950322, 10: 30132076, 11: 28330910, 12: 26932680, 13: 33332666, 14: 31369881, 15: 32324337, 17: 26022470, 19: 29315967},
    17: {0: 29479064, 6: 27829458, 4: 31201226, 18: 29138946, 16: 26022470, 8: 30959457, 3: 29439773, 10: 26162759, 9: 31033257, 13: 28876524, 19: 27237135, 7: 18433903, 14: 17023154, 1: 29926349, 2: 30263697, 5: 30294100, 11: 27423379, 12: 31591461, 15: 31222350},
    18: {0: 28859609, 6: 29730434, 4: 17392801, 16: 18709664, 1: 26989354, 2: 27936885, 3: 27739929, 5: 25178897, 7: 31905380, 8: 29889268, 9: 25934690, 10: 30621460, 11: 31975694, 12: 25437981, 13: 33245767, 14: 28664099, 15: 27812923, 17: 29138946, 19: 30105348},
    19: {0: 32875400, 6: 29457736, 4: 27161053, 18: 30105348, 16: 29315967, 8: 30146332, 3: 30777073, 10: 26660593, 9: 27689266, 13: 18585598, 7: 18428695, 1: 28354374, 2: 25722954, 5: 25771567, 11: 29184736, 12: 31899333, 14: 32553702, 15: 28001748, 17: 27237135}
}

def solve_tsp():
    n = 20
    start = 0

    dp = [[(float('inf'), -1) for _ in range(n)] for _ in range(1 << n)]
    dp[1 << start][start] = (0, -1)

    for mask in range(1 << n):
        for u in range(n):
            if not (mask & (1 << u)):
                continue
            current_cost, _ = dp[mask][u]
            if current_cost == float('inf'):
                continue
            for v in range(n):
                if mask & (1 << v):
                    continue
                new_mask = mask | (1 << v)
                new_cost = current_cost + distances[u][v]
                if new_cost < dp[new_mask][v][0]:
                    dp[new_mask][v] = (new_cost, u)

    full_mask = (1 << n) - 1
    min_cost = float('inf')
    last_node = -1

    for u in range(n):
        if u == start:
            continue
        cost, _ = dp[full_mask][u]
        total_cost = cost + distances[u][start]
        if total_cost < min_cost:
            min_cost = total_cost
            last_node = u

    if last_node == -1:
        return None

    # Reconstruct path
    path = []
    mask = full_mask
    current_node = last_node
    while current_node != -1:
        path.append(current_node)
        _, prev_node = dp[mask][current_node]
        mask ^= (1 << current_node)
        current_node = prev_node

    path.reverse()
    path.append(start)  # Return to start to complete the cycle

    return path


def xor(target, key):
    out = [c ^ key[i % len(key)] for i, c in enumerate(target)]
    return bytearray(out)

def key_from_path(path):
    return hashlib.sha256(str(path).encode()).digest()

def check_path(path, enc_flag):
    flag1 = xor(enc_flag, key_from_path(path))
    flag2 = xor(enc_flag, key_from_path(list(reversed(path))))
    if flag1.startswith(b"BtSCTF"):
        return flag1
    if flag2.startswith(b"BtSCTF"):
        return flag2
    return None

enc_flag = bytearray(b'\xc2\x92\xf9\xf66\xe8\xa5\xa6\x17\xb6mGE\xcfQ\x90Mk:\x9a\xbb\x905&\x19\x8e\xc4\x9a\x0b\x1f\xf8C\xf4\xb9\xc9\x85R\xc2\xbb\x8d\x07\x94[R_\xf5z\x9fAl\x11\x9c\xbb\x9255\x08\x8e\xf6\xd6\x04')

path = solve_tsp()
if path:
    print("Optimal path:", path)
    print(str(path).encode())
    flag = check_path(path, enc_flag)
    if flag:
        print("Flag:", flag.decode())
    else:
        print("No flag found with this path.")
else:
    print("No path found.")
